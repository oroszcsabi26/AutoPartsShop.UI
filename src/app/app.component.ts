import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, RouterModule, NavigationEnd } from '@angular/router';
import { EquipmentService, EquipmentCategory, Equipment } from './services/equipment.service';
import { VehicleSelectionComponent } from './components/vehicle-selection/vehicle-selection.component';
import { PartListComponent } from './components/part-list/part-list.component';
import { AuthService } from './services/auth.service';
import { CartService } from './services/cart.service';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, FormsModule, VehicleSelectionComponent, PartListComponent, RouterModule],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  title = 'AutoPartsShop.UI';

  // üîπ Oldal √°llapotok
  isCartPage: boolean = false;
  isLoginPage: boolean = false;
  isRegisterPage: boolean = false;
  isAuthenticated: boolean = false;
  userName: string | null = null;

  // üîπ Equipment keres√©shez sz√ºks√©ges v√°ltoz√≥k
  equipmentCategories: EquipmentCategory[] = [];
  selectedEquipmentCategoryId: number | null = null;
  equipmentSearchQuery: string = '';
  equipmentResults: Equipment[] = []; // ‚úÖ Ez most m√°r nem t≈±nik el!

  selectedModelId: number | null = null;
  selectedCategoryId: number | null = null;

  constructor(
    private equipmentService: EquipmentService,
    private authService: AuthService,
    private cartService: CartService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.loadEquipmentCategories();
    this.checkAuthenticationStatus();

    // üîπ Figyelj√ºk az √∫tvonal v√°ltoz√°sait, hogy friss√≠ts√ºk az √°llapotokat
    this.router.events.subscribe((event) => {
      if (event instanceof NavigationEnd) {
        this.isCartPage = this.router.url.includes('/kosar');
        this.isLoginPage = this.router.url.includes('/bejelentkezes');
        this.isRegisterPage = this.router.url.includes('/regisztracio');
      }
    });

    // üîπ Figyelj√ºk a bejelentkez√©si √°llapotot
    this.authService.isAuthenticated().subscribe(authStatus => {
      this.isAuthenticated = authStatus;

      // ‚úÖ Nem k√©rdezz√ºk le automatikusan a kosarat, csak ha a user el≈ësz√∂r rak bele term√©ket!
    });
  }

  // üîπ Ellen≈ërzi, hogy a felhaszn√°l√≥ be van-e jelentkezve
  private checkAuthenticationStatus(): void {
    this.authService.isAuthenticated().subscribe((authStatus) => {
      this.isAuthenticated = authStatus;

      if (this.isAuthenticated) {
        this.authService.getUser().subscribe((user) => {
          if (user) {
            this.userName = `${user.firstName} ${user.lastName}`;
          } else {
            this.userName = null;
          }
        });
      } else {
        this.userName = null;
      }
    });
  }

  // üîπ Kijelentkez√©si funkci√≥ (kos√°r, user √©s token t√∂rl√©se is)
  logout(): void {
    this.authService.logout(); // ‚ùå Elegend≈ë csak ezt megh√≠vni!
  
    localStorage.removeItem('cart'); // ‚ùå Kos√°r t√∂rl√©se (ezt m√°r az auth.service.ts elv√©gzi)
    localStorage.removeItem('authToken'); // ‚ùå Token t√∂rl√©se (ezt is)
    localStorage.removeItem('user'); // ‚ùå User t√∂rl√©se (ez is felesleges, mert az authService m√°r kezeli)
  
    this.isAuthenticated = false;
    this.userName = null;
    this.router.navigate(['/bejelentkezes']);
  }  

  // üîπ Felszerel√©si kateg√≥ri√°k bet√∂lt√©se
  loadEquipmentCategories(): void {
    this.equipmentService.getEquipmentCategories().subscribe({
      next: (categories) => {
        this.equipmentCategories = categories;
        console.log("‚úÖ Equipment kateg√≥ri√°k bet√∂ltve:", this.equipmentCategories);
      },
      error: (error) => {
        console.error("‚ùå Hiba t√∂rt√©nt a kateg√≥ri√°k bet√∂lt√©sekor:", error);
      }
    });
  }

  // üîπ Felszerel√©si cikkek keres√©se
  searchEquipment(): void {
    if (this.equipmentSearchQuery.trim() === '') {
      console.warn('‚ö†Ô∏è A keres√©si mez≈ë √ºres!');
      this.equipmentResults = [];
      return;
    }

    this.equipmentService.getEquipmentsByCategory(this.selectedEquipmentCategoryId!).subscribe({
      next: (equipments) => {
        this.equipmentResults = equipments.filter(equipment =>
          equipment.name.toLowerCase().includes(this.equipmentSearchQuery.toLowerCase())
        );
      },
      error: (error) => {
        console.error('‚ùå Hiba t√∂rt√©nt a keres√©s sor√°n:', error);
      }
    });
  }
}
