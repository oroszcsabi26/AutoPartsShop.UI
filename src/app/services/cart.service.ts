import { Injectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Router } from '@angular/router';

// üîπ Kos√°r elem interf√©sz
export interface CartItem {
  id?: number;
  itemType: string; // "Part" vagy "Equipment"
  quantity: number;
  name: string;
  price: number;
  partId?: number;
  equipmentId?: number;
}

@Injectable({
  providedIn: 'root'
})
export class CartService {
  private apiUrl = 'http://localhost:5214/api/cart';
  private router = inject(Router);
  private http = inject(HttpClient);

  constructor() {}

  // üîπ Ellen≈ërzi, hogy a felhaszn√°l√≥ be van-e jelentkezve
  private isAuthenticated(): boolean {
    return !!localStorage.getItem('authToken'); // ‚úÖ Ha van token, be van jelentkezve
  }

  // üîπ Kos√°r lek√©r√©se (ha nem l√©tezik, nem dob hib√°t)
  getCart(): Observable<CartItem[] | null> {
    return this.http.get<CartItem[]>(`${this.apiUrl}/my-cart`).pipe(
      catchError(error => {
        if (error.status === 404) {
          console.warn("‚ö†Ô∏è A felhaszn√°l√≥nak m√©g nincs kosara.");
          return of(null);
        } else {
          console.error("‚ùå Hiba a kos√°r lek√©r√©sekor:", error);
          return of(null);
        }
      })
    );
  }

  // üîπ Term√©k hozz√°ad√°sa a kos√°rhoz (ha nincs bejelentkezve, √°tir√°ny√≠t√°s a login oldalra!)
  addToCart(item: CartItem): Observable<void> {
    if (!this.isAuthenticated()) {
      console.warn("‚ö†Ô∏è Nincs bejelentkezve, √°tir√°ny√≠t√°s a bejelentkez√©sre...");
      this.router.navigate(['/bejelentkezes']);
      return of(); // Hib√°t elker√ºl≈ë √ºres Observable
    }

    return this.http.post<void>(`${this.apiUrl}/add`, {
      itemType: item.itemType,
      quantity: item.quantity,
      partId: item.partId ?? null,
      equipmentId: item.equipmentId ?? null
    });
  }

  // üîπ Kos√°rban l√©v≈ë term√©k mennyis√©g√©nek m√≥dos√≠t√°sa
  updateCartItem(cartItemId: number, newQuantity: number): Observable<void> {
    return this.http.put<void>(`${this.apiUrl}/update/${cartItemId}/${newQuantity}`, {}).pipe(
      catchError(error => {
        console.error("‚ùå Hiba a kos√°r m√≥dos√≠t√°sakor:", error);
        return of();
      })
    );
  }

  // üîπ Term√©k elt√°vol√≠t√°sa a kos√°rb√≥l
  removeFromCart(cartItemId: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/remove/${cartItemId}`).pipe(
      catchError(error => {
        console.error("‚ùå Hiba a term√©k elt√°vol√≠t√°sakor:", error);
        return of();
      })
    );
  }

  // üîπ Backend kos√°r t√∂rl√©se kijelentkez√©skor
  clearCartOnLogout(): Observable<any> {
    return this.http.delete(`${this.apiUrl}/delete`).pipe(
      catchError(error => {
        console.error("‚ùå Hiba a kos√°r t√∂rl√©sekor kijelentkez√©s ut√°n:", error);
        return of(null);
      })
    );
  }

  // üîπ Frontend kos√°r t√∂rl√©se
  clearLocalCart(): void {
    localStorage.removeItem('cart');
  }
}
