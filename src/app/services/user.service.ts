import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

// ğŸ”¹ DTO a felhasznÃ¡lÃ³i adatokhoz
export interface UserProfile {
  firstName: string;
  lastName: string;
  email: string;
  phoneNumber: string;
  address: string;
  shippingAddress: string;
}

// ğŸ”¹ DTO a rendelÃ©si adatokhoz
export interface UserOrder {
  id: number;                // RendelÃ©s azonosÃ­tÃ³ja
  orderDate: string;         // RendelÃ©s leadÃ¡sÃ¡nak dÃ¡tuma
  status: string;            // RendelÃ©s Ã¡llapota (pl.: "FeldolgozÃ¡s alatt")
  totalPrice: number;        // RendelÃ©s vÃ©gÃ¶sszege
  orderItems: OrderItem[];   // RendelÃ©si tÃ©telek listÃ¡ja
}

export interface OrderItem {
  name: string;  // TermÃ©k neve
  quantity: number;     // Megrendelt mennyisÃ©g
  price: number;        // Egy darab Ã¡ra
}

@Injectable({
  providedIn: 'root'
})
export class UserService {
  private apiUrl = 'http://localhost:5214/api/user'; // Backend API URL

  constructor(private http: HttpClient) {} // ğŸ”¹ Itt injektÃ¡ljuk a HttpClient-et!

  // ğŸ”¹ FelhasznÃ¡lÃ³i adatok lekÃ©rÃ©se
  getUserProfile(): Observable<UserProfile> {
    return this.http.get<UserProfile>(`${this.apiUrl}/profile`);
  }

  // ğŸ”¹ FelhasznÃ¡lÃ³i adatok frissÃ­tÃ©se
  updateUserProfile(userData: UserProfile): Observable<any> {
    return this.http.put(`${this.apiUrl}/update-profile`, userData);
  }

  // ğŸ”¹ ğŸ”¥ ÃšJ: FelhasznÃ¡lÃ³i rendelÃ©seinek lekÃ©rÃ©se
  getUserOrders(): Observable<UserOrder[]> {
    return this.http.get<UserOrder[]>(`${this.apiUrl}/my-orders`);
  }
}


