import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService, RegisterRequest } from '../../services/auth.service'; // ‚úÖ AuthService √©s interf√©sz import√°l√°sa

@Component({
  selector: 'app-register',
  standalone: true,
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css'],
  imports: [CommonModule, FormsModule] // ‚úÖ FormsModule az `ngModel` haszn√°lat√°hoz
})
export class RegisterComponent {
  // üîπ Regisztr√°ci√≥s adatok t√°rol√°sa egy objektumban
  user: RegisterRequest = {
    firstName: '',
    lastName: '',
    email: '',
    passwordHash: '',
    address: '',
    shippingAddress: '',
    phoneNumber: ''
  };

  errorMessage: string = ''; // üîπ Hiba√ºzenet megjelen√≠t√©s√©hez
  successMessage: string = ''; // üîπ Sikeres regisztr√°ci√≥ √ºzenet

  constructor(private authService: AuthService, private router: Router) {}

  // üîπ Ellen≈ërizz√ºk, hogy minden mez≈ë ki van-e t√∂ltve √©s megfelel≈ë-e az adatform√°tum
  validateFields(): boolean {
    if (!this.user.firstName || !this.user.lastName || !this.user.email || !this.user.passwordHash || 
        !this.user.address || !this.user.shippingAddress || !this.user.phoneNumber) {
      this.errorMessage = '‚ùå Minden mez≈ë kit√∂lt√©se k√∂telez≈ë!';
      return false;
    }

    if (!this.user.email.includes('@')) {
      this.errorMessage = '‚ùå √ârv√©nytelen e-mail c√≠m!';
      return false;
    }

    if (this.user.passwordHash.length < 8) {
      this.errorMessage = '‚ùå A jelsz√≥nak legal√°bb 8 karakter hossz√∫nak kell lennie!';
      return false;
    }

    if (!/^\d{10,15}$/.test(this.user.phoneNumber)) {
      this.errorMessage = '‚ùå A telefonsz√°m csak sz√°mjegyeket tartalmazhat (10-15 karakter)!';
      return false;
    }

    this.errorMessage = ''; // ‚úÖ Ha minden rendben van, t√∂r√∂lj√ºk a hiba√ºzenetet
    return true;
  }

  // üîπ Regisztr√°ci√≥ ind√≠t√°sa
  register(): void {
    if (!this.validateFields()) return;

    this.authService.register(this.user).subscribe({
      next: () => {
        this.successMessage = '‚úÖ Sikeres regisztr√°ci√≥! √Åtir√°ny√≠t√°s...';
        setTimeout(() => {
          this.router.navigate(['/bejelentkezes']); // ‚úÖ √Åtir√°ny√≠t√°s bejelentkez√©si oldalra
        }, 2000);
      },
      error: (err) => {
        if (err.status === 409) {
          this.errorMessage = '‚ùå Ezzel az e-mail c√≠mmel m√°r regisztr√°ltak!';
        } else {
          this.errorMessage = '‚ö†Ô∏è Hiba t√∂rt√©nt a regisztr√°ci√≥ sor√°n. Pr√≥b√°ld √∫jra!';
        }
      }
    });
  }  
}
