import { Component } from '@angular/core';
import { CommonModule } from '@angular/common'; // 游댳 Import치ljuk a CommonModule-t az *ngFor 칠s *ngIf direkt칤v치khoz
import { CarService } from '../../services/car.service';

@Component({
  selector: 'app-car-list',
  standalone: true, // 游댳 Megjel칬lj칲k, hogy ez egy 칬n치ll칩 komponens
  imports: [CommonModule], // 游댳 Hozz치adjuk a CommonModule-t, hogy haszn치lhassuk az Angular be칠p칤tett direkt칤v치it
  templateUrl: './car-list.component.html',
  styleUrls: ['./car-list.component.css']
})

export class CarListComponent {
  carBrands: any[] = []; // 游댳 Az API-b칩l 칠rkez콈 adatokat t치rol칩 t칬mb
  expandedBrands: Set<number> = new Set(); // 游댳 Az 칠ppen megnyitott aut칩m치rk치k ID-jait t치roljuk

  constructor(private carService: CarService) {}

  ngOnInit(): void {
    this.loadCarBrands();
  }

  // 游댳 API-h칤v치s az aut칩m치rk치k 칠s modellek lek칠r칠s칠re
  loadCarBrands(): void {
    this.carService.getCarBrands().subscribe({
      next: (data) => {
        this.carBrands = data; // 游댳 Az API v치lasz치t elt치roljuk a `carBrands` t칬mbben
        console.log('Aut칩m치rk치k:', this.carBrands); // 游댳 Ellen콈rz칠s a konzolon
      },
      error: (error) => {
        console.error('Hiba t칬rt칠nt az API h칤v치s sor치n:', error);
      }
    });
  }

  toggleModels(brandId: number): void {
    if (this.expandedBrands.has(brandId)) {
      this.expandedBrands.delete(brandId); // 游댳 Ha m치r nyitva van, z치rjuk be
    } else {
      this.expandedBrands.add(brandId); // 游댳 Ha z치rva van, nyissuk meg
    }
  }

  // 游댳 Ellen콈rizz칲k, hogy az adott aut칩m치rka nyitva van-e
  isExpanded(brandId: number): boolean {
    return this.expandedBrands.has(brandId);
  }
}

